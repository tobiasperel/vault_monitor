import { Address, TransactionType, Abi } from "viem";

import { Hex } from "viem";

/** The block containing the transaction that emitted the log being processed. */
type Block = {
    /** Base fee per gas */
    baseFeePerGas: bigint | null;
    /** "Extra data" field of this block */
    extraData: `0x${string}`;
    /** Maximum gas allowed in this block */
    gasLimit: bigint;
    /** Total used gas by all transactions in this block */
    gasUsed: bigint;
    /** Block hash */
    hash: `0x${string}`;
    /** Logs bloom filter */
    logsBloom: `0x${string}`;
    /** Address that received this block’s mining rewards */
    miner: `0x${string}`;
    /** Block number */
    number: bigint;
    /** Parent block hash */
    parentHash: `0x${string}`;
    /** Root of the this block’s receipts trie */
    receiptsRoot: `0x${string}`;
    /** Size of this block in bytes */
    size: bigint;
    /** Root of this block’s final state trie */
    stateRoot: `0x${string}`;
    /** Unix timestamp of when this block was collated */
    timestamp: bigint;
    /** Total difficulty of the chain until this block */
    totalDifficulty: bigint | null;
    /** Root of this block’s transaction trie */
    transactionsRoot: `0x${string}`;
  };
   
  /** The transaction that emitted the log being processed. */
  type Transaction = {
    /** Transaction sender */
    from: `0x${string}`;
    /** Gas provided for transaction execution */
    gas: bigint;
    /** Base fee per gas. */
    gasPrice?: bigint | undefined;
    /** Hash of this transaction */
    hash: `0x${string}`;
    /** Contract code or a hashed method call */
    input: `0x${string}`;
    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */
    maxFeePerGas?: bigint | undefined;
    /** Max priority fee per gas (in wei). */
    maxPriorityFeePerGas?: bigint | undefined;
    /** Unique number identifying this transaction */
    nonce: number;
    /** Transaction recipient or `null` if deploying a contract */
    to: `0x${string}` | null;
    /** Index of this transaction in the block */
    transactionIndex: number;
    /** Value in wei sent with this transaction */
    value: bigint;
  };
   
  /** A confirmed Ethereum transaction receipt. */
  type TransactionReceipt = {
    /** Address of new contract or `null` if no contract was created */
    contractAddress: Address | null;
    /** Gas used by this and all preceding transactions in this block */
    cumulativeGasUsed: bigint;
    /** Pre-London, it is equal to the transaction's gasPrice. Post-London, it is equal to the actual gas price paid for inclusion. */
    effectiveGasPrice: bigint;
    /** Transaction sender */
    from: Address;
    /** Gas used by this transaction */
    gasUsed: bigint;
    /** List of log objects generated by this transaction */
    logs: Log[];
    /** Logs bloom filter */
    logsBloom: Hex;
    /** `success` if this transaction was successful or `reverted` if it failed */
    status: "success" | "reverted";
    /** Transaction recipient or `null` if deploying a contract */
    to: Address | null;
    /** Transaction type */
    type: TransactionType;
  };
   
  /** The log being processed. */
  type Log = {
    /** The address from which this log originated */
    address: `0x${string}`;
    /** Contains the non-indexed arguments of the log */
    data: `0x${string}`;
    /** Index of this log within its block */
    logIndex: number;
    /** `true` if this log has been removed in a chain reorganization */
    removed: boolean;
    /** List of order-dependent topics */
    topics: [`0x${string}`, ...`0x${string}`[]] | [];
  };
   
  type Trace = {
    /** The type of the call. */
    type:
      | "CALL"
      | "CALLCODE"
      | "DELEGATECALL"
      | "STATICCALL"
      | "CREATE"
      | "CREATE2"
      | "SELFDESTRUCT";
    /** The address of that initiated the call. */
    from: Address;
    /** The address of the contract that was called. */
    to: Address | null;
    /** How much gas was left before the call. */
    gas: bigint;
    /** How much gas was used by the call. */
    gasUsed: bigint;
    /** Calldata input. */
    input: Hex;
    /** Output of the call, if any. */
    output?: Hex;
    /** Error message, if any. */
    error?: string;
    /** Why this call reverted, if it reverted. */
    revertReason?: string;
    /** Value transferred. */
    value: bigint | null;
    /** Index of this trace in the transaction. */
    traceIndex: number;
    /** Number of subcalls. */
    subcalls: number;
  };

  type Context = {
    db: any;
    network: { name: string; chainId: number };
    client: any;
    contracts: Record<
      string,
      { abi: Abi; address?: `0x${string}`; startBlock?: number; endBlock?: number; }
    >;
  };

  export type { Block, Transaction, TransactionReceipt, Log, Trace, Context };